#include <string>
#include <iostream>

#define LOG_LOCAL_LEVEL ESP_LOG_VERBOSE
#include "esp_log.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "device.hpp"
#include "nvs_flash.h"


// 'A', 60x44px
const unsigned char epd_bitmap_A [] = {
	0x00, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfb, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xf9, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf9, 0xff, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xf1, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0xff, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xf0, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0xff, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xe0, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x7f, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xc0, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x3f, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xc0, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x3f, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0x80, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x1f, 0xf0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 
	0x00, 0x03, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 
	0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 
	0x00, 0x0f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x03, 0xff, 0x00, 0x00, 
	0x00, 0x0f, 0xf8, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x03, 0xff, 0x00, 0x00, 
	0x00, 0x1f, 0xf8, 0x00, 0x01, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x01, 0xff, 0x80, 0x00, 
	0x00, 0x3f, 0xf0, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0xff, 0xc0, 0x00, 
	0x00, 0x3f, 0xe0, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0xff, 0xe0, 0x00
};
// 'M', 60x44px
const unsigned char epd_bitmap_M [] = {
	0x00, 0xff, 0xe0, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xf0, 0x00, 
	0x00, 0xff, 0xf0, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0xff, 0xf0, 0x00, 
	0x00, 0xff, 0xf8, 0x00, 0x01, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x01, 0xff, 0xf0, 0x00, 
	0x00, 0xff, 0xfc, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xfe, 0x00, 0x03, 0xff, 0xf0, 0x00, 
	0x00, 0xff, 0xff, 0x00, 0x07, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xff, 0x00, 0x07, 0xff, 0xf0, 0x00, 
	0x00, 0xff, 0xff, 0x80, 0x0f, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xff, 0x80, 0x1f, 0xff, 0xf0, 0x00, 
	0x00, 0xff, 0xff, 0xc0, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0xff, 0xbf, 0xe0, 0x3f, 0xdf, 0xf0, 0x00, 
	0x00, 0xff, 0xbf, 0xe0, 0x3f, 0xdf, 0xf0, 0x00, 0x00, 0xff, 0x9f, 0xf0, 0x7f, 0x9f, 0xf0, 0x00, 
	0x00, 0xff, 0x9f, 0xf0, 0x7f, 0x9f, 0xf0, 0x00, 0x00, 0xff, 0x8f, 0xf8, 0xff, 0x1f, 0xf0, 0x00, 
	0x00, 0xff, 0x87, 0xf9, 0xff, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x87, 0xfd, 0xfe, 0x1f, 0xf0, 0x00, 
	0x00, 0xff, 0x83, 0xff, 0xfc, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x83, 0xff, 0xfc, 0x1f, 0xf0, 0x00, 
	0x00, 0xff, 0x81, 0xff, 0xf8, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x81, 0xff, 0xf8, 0x1f, 0xf0, 0x00, 
	0x00, 0xff, 0x80, 0xff, 0xf0, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x80, 0x7f, 0xf0, 0x1f, 0xf0, 0x00, 
	0x00, 0xff, 0x80, 0x7f, 0xe0, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x80, 0x3f, 0xc0, 0x1f, 0xf0, 0x00, 
	0x00, 0xff, 0x80, 0x3f, 0xc0, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x80, 0x1f, 0x80, 0x1f, 0xf0, 0x00, 
	0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
	0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
	0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
	0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
	0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
	0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 
	0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x1f, 0xf0, 0x00
};
// 'X', 60x44px
const unsigned char epd_bitmap_X [] = {
	0x00, 0x1f, 0xf8, 0x00, 0x07, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x0f, 0xfe, 0x00, 0x00, 
	0x00, 0x0f, 0xfc, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x1f, 0xf8, 0x00, 0x00, 
	0x00, 0x07, 0xfe, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x3f, 0xf0, 0x00, 0x00, 
	0x00, 0x03, 0xff, 0x80, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x7f, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xc0, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xe1, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe1, 0xff, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xf3, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf7, 0xff, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xf3, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xe1, 0xff, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xe1, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xc0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x80, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x7f, 0xe0, 0x00, 0x00, 
	0x00, 0x03, 0xff, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x3f, 0xf8, 0x00, 0x00, 
	0x00, 0x07, 0xfe, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x00, 0x1f, 0xfc, 0x00, 0x00, 
	0x00, 0x1f, 0xfc, 0x00, 0x0f, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x00, 0x0f, 0xfe, 0x00, 0x00, 
	0x00, 0x3f, 0xf0, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x07, 0xff, 0x80, 0x00
};
// 'd', 60x44px
const unsigned char epd_bitmap_d [] = {
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x1f, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0xfe, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x1f, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xff, 0x9f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xdf, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xc3, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x03, 0xff, 0x00, 0x7f, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x3f, 0xe0, 0x00, 0x00, 
	0x00, 0x03, 0xfe, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x1f, 0xe0, 0x00, 0x00, 
	0x00, 0x07, 0xfc, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x1f, 0xe0, 0x00, 0x00, 
	0x00, 0x07, 0xfc, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x1f, 0xe0, 0x00, 0x00, 
	0x00, 0x07, 0xfc, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x1f, 0xe0, 0x00, 0x00, 
	0x00, 0x07, 0xfc, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x1f, 0xe0, 0x00, 0x00, 
	0x00, 0x07, 0xfc, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x3f, 0xe0, 0x00, 0x00, 
	0x00, 0x03, 0xfe, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x7f, 0xe0, 0x00, 0x00, 
	0x00, 0x03, 0xff, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc3, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xdf, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x9f, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xff, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x1f, 0xe0, 0x00, 0x00
};
// 'u', 60x44px
const unsigned char epd_bitmap_u [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x00, 0x1f, 0xf0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x7f, 0xf0, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0xc1, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x7f, 0xff, 0xdf, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x9f, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x1f, 0xff, 0x1f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xfc, 0x1f, 0xf0, 0x00, 0x00
};

// 'empy', 60x44px
const unsigned char epd_bitmap_empy [] = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1840)
const unsigned char* AudMX_bitmap[5] = {
	epd_bitmap_A,
	epd_bitmap_u,
	epd_bitmap_d,
	epd_bitmap_M,
	epd_bitmap_X
};


#define PROMPT_STR CONFIG_IDF_TARGET
#define CMD_SET_ICON    "SET_ICON"

extern "C" {
    void app_main(void);
}

Device audMix;

extern CRGB *ws2812b_display_buffer;

static inline void stripConvert2br(uint8_t input, uint8_t *out_a, uint8_t *out_b) {
    *out_a = input/2;
    if(input & 0x01){
        *out_b = input/2 + 1;
    }else{
        *out_b = input/2;
    }
}

static inline void stripConvertCRGB2br( CRGB color, CRGB *color_a, CRGB *color_b ){
    stripConvert2br(color.r, &color_a->r, &color_b->r);
    stripConvert2br(color.g, &color_a->g, &color_b->g);
    stripConvert2br(color.b, &color_a->b, &color_b->b);
}

void stripTask( void *args ){
    CRGB *ws2812_output_buffer;
    ESP_ERROR_CHECK_WITHOUT_ABORT(ws28xx_init(STRIP_PIN, STRIP_TYPE, STRIP_LED_COUNT, &ws2812_output_buffer));
    for(uint32_t i = 0; i < STRIP_LED_COUNT; i++){
        ws2812b_display_buffer[i].r = 0;
        ws2812b_display_buffer[i].g = 0;
        ws2812b_display_buffer[i].b = 0;
    }

    CRGB color_arr[STRIP_LED_COUNT][2];
    while (1){
        // Convert display buffer for interpolated steps
        // Add 1 extra bit for each color, but max brightness also div to 2
        for(uint32_t i = 0; i < STRIP_LED_COUNT; i++){
            for(uint32_t i = 0; i < STRIP_LED_COUNT; i++){
                stripConvertCRGB2br(ws2812b_display_buffer[i], &color_arr[i][0], &color_arr[i][1]);
                // Divider for 4 work, but 66Hz flick visible
                //stripConvertCRGB2br(ws2812b_display_buffer[i], &color_tmp[0], &color_tmp[1]);
                //stripConvertCRGB2br(color_tmp[0], &color_arr[i][0], &color_arr[i][1]);
                //stripConvertCRGB2br(color_tmp[1], &color_arr[i][3], &color_arr[i][2]);
            }
        }

        // Display colors
        for(uint32_t i = 0; i < 2; i++){
            for(uint32_t j = 0; j < STRIP_LED_COUNT; j++){
                ws2812_output_buffer[j] = color_arr[j][i];
            }
            ws28xx_update();
            delay(1);
        }
    }
}

void readTask( void *args ){
    uint16_t positions_old[SLIDERS_COUNT];
    int64_t timestamp = 0;

    while (1){
        bool need_positions_send = false;
        // Check updated value
        for(uint32_t i = 0; i < SLIDERS_COUNT; i++){
            audMix.sliders[i].updatePosition();
            uint16_t position_current = (uint16_t)std::round(audMix.sliders[i].readPosition() * 1023.0f);
            if(positions_old[i] != position_current){
                need_positions_send = true;
                positions_old[i] = position_current;
            }
        }

        // Send every second
        if((esp_timer_get_time() - timestamp) >= 3000000LL){
            timestamp = esp_timer_get_time();
            need_positions_send = true;
        }

        if(need_positions_send){
            for(uint32_t i = 0; i < SLIDERS_COUNT; i++){
                std::cout << (int)positions_old[i];
                if(i < (SLIDERS_COUNT - 1)){
                    std::cout << "|";
                }
            }
            std::cout << std::endl;
        }
        delay(20);
    }
}

void displayTask( void *args ){
    for(uint32_t i = 0; i < SLIDERS_COUNT; i++){
        audMix.sliders[i].display.setBrightness(255);
        audMix.sliders[i].setIcon(AudMX_bitmap[i], 60, 44);
        audMix.sliders[i].updateDisplay();
    }
    delay(3000);
    for(uint32_t i = 255; i > 20; i--){
        for( auto& slider : audMix.sliders ){
            slider.display.setBrightness(i);
        }
        delay(10);
    }
    
    while(1){
        for( auto& slider : audMix.sliders ){
            slider.updateDisplay();
        }
        delay(50);
    }
}

void stripAnimation( void *args ){
    while(1){
        delay(20);
        for(uint32_t i = 0; i < SLIDERS_COUNT; i++){
            audMix.sliders[i].strip.update();
        }
    }
}

void consoleTask( void *args ){
    std::string str = "";

    while (1){
        int res = 0;
        std::getline(std::cin, str);

        if(str.compare(0, strlen(CMD_SET_ICON), CMD_SET_ICON) == 0){
            uint8_t icon_array[((ICON_WIDTH+7)/8)*ICON_HEIGHT];

            std::string afterPrefix = str.substr(strlen(CMD_SET_ICON)+1);
            int display_num = std::atoi(afterPrefix.c_str());
            if((display_num < 0) || (display_num >= SLIDERS_COUNT)){
                res = 1;
                goto exit;
            }
            
            std::cin.read((char*)icon_array, sizeof(icon_array));
            audMix.sliders[display_num].setIcon(icon_array, ICON_WIDTH, ICON_HEIGHT);
            audMix.sliders[display_num].displayIcon(true);
        }else{
            res = -1;
        }
exit:
        if(res == 0){
            std::cout << "OK" << std::endl;
        }else{
            std::cout << "ERROR: " << res << std::endl;
        }
        delay(1);
    }
}

void app_main() {
    //esp_log_level_set("*", ESP_LOG_DEBUG);
    esp_log_level_set("*", ESP_LOG_NONE);

    esp_err_t err = nvs_flash_init();
    if ((err == ESP_ERR_NVS_NO_FREE_PAGES) || (err == ESP_ERR_NVS_NEW_VERSION_FOUND)) {
        ESP_LOGW("NVS", "Erasing NVS partition...");
        nvs_flash_erase();
        err = nvs_flash_init();
    };
    if (err == ESP_OK) {
        ESP_LOGI("NVS", "NVS partition initilized");
    } else {
        ESP_LOGE("NVS", "NVS partition initialization error: %d (%s)", err, esp_err_to_name(err));
    };

    audMix.init();
    xTaskCreate(consoleTask, "console_task", 5000, NULL, 1500, NULL);
    xTaskCreate(stripAnimation, "strip_ani_task", 1000, NULL, 1900, NULL);
    xTaskCreate(readTask, "read_task", 3000, NULL, 1200, NULL);
    xTaskCreate(displayTask, "displays_task", 3000, NULL, 1000, NULL);
    xTaskCreate(stripTask, "strip_task", 3000, NULL, 2000, NULL);
}
